package shiropro.shiro


import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;

import org.apache.shiro.authc.AuthenticationException;

import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;

import shiropro.entity.UserInfo;
import shiropro.service.IUserInfoService;
/**
 * shiro身份校验 * wanglifa by test
 * @author wangyao
 *
 */
public class MyShiroRealm extends AuthorizingRealm {

	@Resource	private IUserInfoService userInfoService;

	/**
	 * 认证信息.(身份验证) : Authentication 是用来验证用户身份
	 * 	 * @param token
	 * @return	 * @throws AuthenticationException
	 */
	@Override
	protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
		System.err.println("MyShiroRealm.doGetAuthenticationInfo()");
		UsernamePasswordToken tk=(UsernamePasswordToken) token;
		// 获取用户的输入的账号.
		String username =  tk.getUsername();
		//String pwd=new String(token.getPassword());
		// 实际项目中，这里可以根据实际情况做缓存，如果不做，Shiro自己也是有时间间隔机制，2分钟内不会重复执行该方法
		UserInfo userInfo = userInfoService.findByUsername(username);
		//密码可以加密在此
		System.out.println("----->>userInfo=" + userInfo);
		if (userInfo == null) {
			return null;
		}
		SimpleAuthenticationInfo authenticationInfo = new SimpleAuthenticationInfo(userInfo, // 用户名
				getName() // realm name
		);

		return authenticationInfo;
	}
    /**
     * 获取授权信息(包含权限信息)
     */
	@Override
	protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection pc) {
		UserInfo user=(UserInfo) getAvailablePrincipal(pc);
		System.err.println("授权："+user);
		String loginName= user.getUsername();
		if (loginName != null) {
			SimpleAuthorizationInfo info=new SimpleAuthorizationInfo();
			Map<String,Object> map=user.getPerList();
			//用户的角色信息
			/*List<String> roles=(List<String>) map.get("roles");
			for (String role : roles) {
				info.addRole(role);
			}*/
			Set<String> roleSet=new HashSet<String>(); 
			roleSet.add("100002");
		    info.setRoles(roleSet);
			//用户的权限信息
			/*List<String> permissions=(List<String>) map.get("permissions");
			for (String permission : permissions) {
				info.addStringPermission(permission);
			}*/
			Set<String> permissionSet =new HashSet<String>(); 
			permissionSet.add("权限删除");
			permissionSet.add("权限编辑");
			permissionSet.add("权限添加");
		    info.setStringPermissions(permissionSet);
			return info;
		}
		return null;
	}


}
